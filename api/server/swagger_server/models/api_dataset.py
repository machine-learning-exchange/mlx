# Copyright 2021 The MLX Contributors
#
# SPDX-License-Identifier: Apache-2.0
# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.api_asset import ApiAsset
from swagger_server.models.api_metadata import ApiMetadata  # noqa: F401,E501
from swagger_server.models.api_parameter import ApiParameter  # noqa: F401,E501
from swagger_server import util


class ApiDataset(ApiAsset):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str = None, created_at: datetime = None, name: str = None, description: str = None, featured: bool = None, publish_approved: bool = None, related_assets: List[str] = None, filter_categories: Dict[str, str] = None, domain: str = None, format: str = None, size: str = None, number_of_records: int = None, license: str = None, metadata: ApiMetadata = None):  # noqa: E501
        """ApiDataset - a model defined in Swagger

        :param id: The id of this ApiDataset.  # noqa: E501
        :type id: str
        :param created_at: The created_at of this ApiDataset.  # noqa: E501
        :type created_at: datetime
        :param name: The name of this ApiDataset.  # noqa: E501
        :type name: str
        :param description: The description of this ApiDataset.  # noqa: E501
        :type description: str
        :param featured: The featured of this ApiDataset.  # noqa: E501
        :type featured: bool
        :param publish_approved: The publish_approved of this ApiDataset.  # noqa: E501
        :type publish_approved: bool
        :param related_assets: The related_assets of this ApiDataset.  # noqa: E501
        :type related_assets: List[str]
        :param filter_categories: The filter_categories of this ApiDataset.  # noqa: E501
        :type filter_categories: Dict[str, str]
        :param domain: The domain of this ApiDataset.  # noqa: E501
        :type domain: str
        :param format: The format of this ApiDataset.  # noqa: E501
        :type format: str
        :param size: The size of this ApiDataset.  # noqa: E501
        :type size: str
        :param number_of_records: The number_of_records of this ApiDataset.  # noqa: E501
        :type number_of_records: int
        :param license: The license of this ApiDataset.  # noqa: E501
        :type license: str
        :param metadata: The metadata of this ApiDataset.  # noqa: E501
        :type metadata: ApiMetadata
        """
        self.swagger_types = {
            'id': str,
            'created_at': datetime,
            'name': str,
            'description': str,
            'featured': bool,
            'publish_approved': bool,
            'related_assets': List[str],
            'filter_categories': Dict[str, str],
            'domain': str,
            'format': str,
            'size': str,
            'number_of_records': int,
            'license': str,
            'metadata': ApiMetadata
        }

        self.attribute_map = {
            'id': 'id',
            'created_at': 'created_at',
            'name': 'name',
            'description': 'description',
            'featured': 'featured',
            'publish_approved': 'publish_approved',
            'related_assets': 'related_assets',
            'filter_categories': 'filter_categories',
            'domain': 'domain',
            'format': 'format',
            'size': 'size',
            'number_of_records': 'number_of_records',
            'license': 'license',
            'metadata': 'metadata'
        }

        self._id = id
        self._created_at = created_at
        self._name = name
        self._description = description
        self._featured = featured
        self._publish_approved = publish_approved
        self._related_assets = related_assets
        self._filter_categories = filter_categories
        self._domain = domain
        self._format = format
        self._size = size
        self._number_of_records = number_of_records
        self._license = license
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt) -> 'ApiDataset':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The apiDataset of this ApiDataset.  # noqa: E501
        :rtype: ApiDataset
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this ApiDataset.


        :return: The id of this ApiDataset.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ApiDataset.


        :param id: The id of this ApiDataset.
        :type id: str
        """

        self._id = id

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this ApiDataset.


        :return: The created_at of this ApiDataset.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this ApiDataset.


        :param created_at: The created_at of this ApiDataset.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def name(self) -> str:
        """Gets the name of this ApiDataset.


        :return: The name of this ApiDataset.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ApiDataset.


        :param name: The name of this ApiDataset.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this ApiDataset.


        :return: The description of this ApiDataset.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this ApiDataset.


        :param description: The description of this ApiDataset.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def featured(self) -> bool:
        """Gets the featured of this ApiDataset.


        :return: The featured of this ApiDataset.
        :rtype: bool
        """
        return self._featured

    @featured.setter
    def featured(self, featured: bool):
        """Sets the featured of this ApiDataset.


        :param featured: The featured of this ApiDataset.
        :type featured: bool
        """

        self._featured = featured

    @property
    def publish_approved(self) -> bool:
        """Gets the publish_approved of this ApiDataset.


        :return: The publish_approved of this ApiDataset.
        :rtype: bool
        """
        return self._publish_approved

    @publish_approved.setter
    def publish_approved(self, publish_approved: bool):
        """Sets the publish_approved of this ApiDataset.


        :param publish_approved: The publish_approved of this ApiDataset.
        :type publish_approved: bool
        """

        self._publish_approved = publish_approved

    @property
    def related_assets(self) -> List[str]:
        """Gets the related_assets of this ApiDataset.


        :return: The related_assets of this ApiDataset.
        :rtype: List[str]
        """
        return self._related_assets

    @related_assets.setter
    def related_assets(self, related_assets: List[str]):
        """Sets the related_assets of this ApiDataset.


        :param related_assets: The related_assets of this ApiDataset.
        :type related_assets: List[str]
        """

        self._related_assets = related_assets

    @property
    def filter_categories(self) -> Dict[str, str]:
        """Gets the filter_categories of this ApiDataset.


        :return: The filter_categories of this ApiDataset.
        :rtype: Dict[str, str]
        """
        return self._filter_categories

    @filter_categories.setter
    def filter_categories(self, filter_categories: Dict[str, str]):
        """Sets the filter_categories of this ApiDataset.


        :param filter_categories: The filter_categories of this ApiDataset.
        :type filter_categories: Dict[str, str]
        """

        self._filter_categories = filter_categories

    @property
    def domain(self) -> str:
        """Gets the domain of this ApiDataset.


        :return: The domain of this ApiDataset.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain: str):
        """Sets the domain of this ApiDataset.


        :param domain: The domain of this ApiDataset.
        :type domain: str
        """

        self._domain = domain

    @property
    def format(self) -> str:
        """Gets the format of this ApiDataset.


        :return: The format of this ApiDataset.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format: str):
        """Sets the format of this ApiDataset.


        :param format: The format of this ApiDataset.
        :type format: str
        """

        self._format = format

    @property
    def size(self) -> str:
        """Gets the size of this ApiDataset.


        :return: The size of this ApiDataset.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size: str):
        """Sets the size of this ApiDataset.


        :param size: The size of this ApiDataset.
        :type size: str
        """

        self._size = size

    @property
    def number_of_records(self) -> int:
        """Gets the number_of_records of this ApiDataset.


        :return: The number_of_records of this ApiDataset.
        :rtype: int
        """
        return self._number_of_records

    @number_of_records.setter
    def number_of_records(self, number_of_records: int):
        """Sets the number_of_records of this ApiDataset.


        :param number_of_records: The number_of_records of this ApiDataset.
        :type number_of_records: int
        """

        self._number_of_records = number_of_records

    @property
    def license(self) -> str:
        """Gets the license of this ApiDataset.


        :return: The license of this ApiDataset.
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license: str):
        """Sets the license of this ApiDataset.


        :param license: The license of this ApiDataset.
        :type license: str
        """

        self._license = license

    @property
    def metadata(self) -> ApiMetadata:
        """Gets the metadata of this ApiDataset.


        :return: The metadata of this ApiDataset.
        :rtype: ApiMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: ApiMetadata):
        """Sets the metadata of this ApiDataset.


        :param metadata: The metadata of this ApiDataset.
        :type metadata: ApiMetadata
        """

        self._metadata = metadata
