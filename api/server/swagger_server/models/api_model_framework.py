# Copyright 2021 The MLX Contributors
#
# SPDX-License-Identifier: Apache-2.0
# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.api_model_framework_runtimes import ApiModelFrameworkRuntimes  # noqa: F401,E501
from swagger_server import util


class ApiModelFramework(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str = None, version: str = None, runtimes: ApiModelFrameworkRuntimes = None):  # noqa: E501
        """ApiModelFramework - a model defined in Swagger

        :param name: The name of this ApiModelFramework.  # noqa: E501
        :type name: str
        :param version: The version of this ApiModelFramework.  # noqa: E501
        :type version: str
        :param runtimes: The runtimes of this ApiModelFramework.  # noqa: E501
        :type runtimes: ApiModelFrameworkRuntimes
        """
        self.swagger_types = {
            'name': str,
            'version': str,
            'runtimes': ApiModelFrameworkRuntimes
        }

        self.attribute_map = {
            'name': 'name',
            'version': 'version',
            'runtimes': 'runtimes'
        }

        self._name = name
        self._version = version
        self._runtimes = runtimes

    @classmethod
    def from_dict(cls, dikt) -> 'ApiModelFramework':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The apiModelFramework of this ApiModelFramework.  # noqa: E501
        :rtype: ApiModelFramework
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this ApiModelFramework.


        :return: The name of this ApiModelFramework.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ApiModelFramework.


        :param name: The name of this ApiModelFramework.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def version(self) -> str:
        """Gets the version of this ApiModelFramework.


        :return: The version of this ApiModelFramework.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this ApiModelFramework.


        :param version: The version of this ApiModelFramework.
        :type version: str
        """

        self._version = version

    @property
    def runtimes(self) -> ApiModelFrameworkRuntimes:
        """Gets the runtimes of this ApiModelFramework.


        :return: The runtimes of this ApiModelFramework.
        :rtype: ApiModelFrameworkRuntimes
        """
        return self._runtimes

    @runtimes.setter
    def runtimes(self, runtimes: ApiModelFrameworkRuntimes):
        """Sets the runtimes of this ApiModelFramework.


        :param runtimes: The runtimes of this ApiModelFramework.
        :type runtimes: ApiModelFrameworkRuntimes
        """

        self._runtimes = runtimes
