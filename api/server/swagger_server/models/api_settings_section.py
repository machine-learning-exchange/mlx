# Copyright 2021 The MLX Contributors
#
# SPDX-License-Identifier: Apache-2.0
# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.api_parameter import ApiParameter  # noqa: F401,E501
from swagger_server import util


class ApiSettingsSection(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str = None, description: str = None, settings: List[ApiParameter] = None):  # noqa: E501
        """ApiSettingsSection - a model defined in Swagger

        :param name: The name of this ApiSettingsSection.  # noqa: E501
        :type name: str
        :param description: The description of this ApiSettingsSection.  # noqa: E501
        :type description: str
        :param settings: The settings of this ApiSettingsSection.  # noqa: E501
        :type settings: List[ApiParameter]
        """
        self.swagger_types = {
            'name': str,
            'description': str,
            'settings': List[ApiParameter]
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'settings': 'settings'
        }

        self._name = name
        self._description = description
        self._settings = settings

    @classmethod
    def from_dict(cls, dikt) -> 'ApiSettingsSection':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The apiSettingsSection of this ApiSettingsSection.  # noqa: E501
        :rtype: ApiSettingsSection
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this ApiSettingsSection.

        Display name of the configuration category.  # noqa: E501

        :return: The name of this ApiSettingsSection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ApiSettingsSection.

        Display name of the configuration category.  # noqa: E501

        :param name: The name of this ApiSettingsSection.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this ApiSettingsSection.

        Display text of the configuration category.  # noqa: E501

        :return: The description of this ApiSettingsSection.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this ApiSettingsSection.

        Display text of the configuration category.  # noqa: E501

        :param description: The description of this ApiSettingsSection.
        :type description: str
        """

        self._description = description

    @property
    def settings(self) -> List[ApiParameter]:
        """Gets the settings of this ApiSettingsSection.

        List of settings.  # noqa: E501

        :return: The settings of this ApiSettingsSection.
        :rtype: List[ApiParameter]
        """
        return self._settings

    @settings.setter
    def settings(self, settings: List[ApiParameter]):
        """Sets the settings of this ApiSettingsSection.

        List of settings.  # noqa: E501

        :param settings: The settings of this ApiSettingsSection.
        :type settings: List[ApiParameter]
        """

        self._settings = settings
