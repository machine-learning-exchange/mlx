# Copyright 2021 The MLX Contributors
#
# SPDX-License-Identifier: Apache-2.0
# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.api_pipeline_task_arguments import ApiPipelineTaskArguments  # noqa: F401,E501
from swagger_server import util


class ApiPipelineTask(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str = None, artifact_type: str = None, artifact_id: str = None, arguments: ApiPipelineTaskArguments = None, dependencies: List[str] = None):  # noqa: E501
        """ApiPipelineTask - a model defined in Swagger

        :param name: The name of this ApiPipelineTask.  # noqa: E501
        :type name: str
        :param artifact_type: The artifact_type of this ApiPipelineTask.  # noqa: E501
        :type artifact_type: str
        :param artifact_id: The artifact_id of this ApiPipelineTask.  # noqa: E501
        :type artifact_id: str
        :param arguments: The arguments of this ApiPipelineTask.  # noqa: E501
        :type arguments: ApiPipelineTaskArguments
        :param dependencies: The dependencies of this ApiPipelineTask.  # noqa: E501
        :type dependencies: List[str]
        """
        self.swagger_types = {
            'name': str,
            'artifact_type': str,
            'artifact_id': str,
            'arguments': ApiPipelineTaskArguments,
            'dependencies': List[str]
        }

        self.attribute_map = {
            'name': 'name',
            'artifact_type': 'artifact_type',
            'artifact_id': 'artifact_id',
            'arguments': 'arguments',
            'dependencies': 'dependencies'
        }

        self._name = name
        self._artifact_type = artifact_type
        self._artifact_id = artifact_id
        self._arguments = arguments
        self._dependencies = dependencies

    @classmethod
    def from_dict(cls, dikt) -> 'ApiPipelineTask':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The apiPipelineTask of this ApiPipelineTask.  # noqa: E501
        :rtype: ApiPipelineTask
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this ApiPipelineTask.


        :return: The name of this ApiPipelineTask.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ApiPipelineTask.


        :param name: The name of this ApiPipelineTask.
        :type name: str
        """

        self._name = name

    @property
    def artifact_type(self) -> str:
        """Gets the artifact_type of this ApiPipelineTask.

        The type of artifact for this task, can be either one of: 'component', 'model', 'notebook', 'pipeline'  # noqa: E501

        :return: The artifact_type of this ApiPipelineTask.
        :rtype: str
        """
        return self._artifact_type

    @artifact_type.setter
    def artifact_type(self, artifact_type: str):
        """Sets the artifact_type of this ApiPipelineTask.

        The type of artifact for this task, can be either one of: 'component', 'model', 'notebook', 'pipeline'  # noqa: E501

        :param artifact_type: The artifact_type of this ApiPipelineTask.
        :type artifact_type: str
        """
        if artifact_type is None:
            raise ValueError("Invalid value for `artifact_type`, must not be `None`")  # noqa: E501

        self._artifact_type = artifact_type

    @property
    def artifact_id(self) -> str:
        """Gets the artifact_id of this ApiPipelineTask.

        The UUID of the artifact for this task  # noqa: E501

        :return: The artifact_id of this ApiPipelineTask.
        :rtype: str
        """
        return self._artifact_id

    @artifact_id.setter
    def artifact_id(self, artifact_id: str):
        """Sets the artifact_id of this ApiPipelineTask.

        The UUID of the artifact for this task  # noqa: E501

        :param artifact_id: The artifact_id of this ApiPipelineTask.
        :type artifact_id: str
        """
        if artifact_id is None:
            raise ValueError("Invalid value for `artifact_id`, must not be `None`")  # noqa: E501

        self._artifact_id = artifact_id

    @property
    def arguments(self) -> ApiPipelineTaskArguments:
        """Gets the arguments of this ApiPipelineTask.


        :return: The arguments of this ApiPipelineTask.
        :rtype: ApiPipelineTaskArguments
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments: ApiPipelineTaskArguments):
        """Sets the arguments of this ApiPipelineTask.


        :param arguments: The arguments of this ApiPipelineTask.
        :type arguments: ApiPipelineTaskArguments
        """

        self._arguments = arguments

    @property
    def dependencies(self) -> List[str]:
        """Gets the dependencies of this ApiPipelineTask.

        Task dependencies, referring to upstream tasks that have to be completed prior to running this task by their respective task names  # noqa: E501

        :return: The dependencies of this ApiPipelineTask.
        :rtype: List[str]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies: List[str]):
        """Sets the dependencies of this ApiPipelineTask.

        Task dependencies, referring to upstream tasks that have to be completed prior to running this task by their respective task names  # noqa: E501

        :param dependencies: The dependencies of this ApiPipelineTask.
        :type dependencies: List[str]
        """

        self._dependencies = dependencies
