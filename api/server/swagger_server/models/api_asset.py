# Copyright 2021 The MLX Contributors
#
# SPDX-License-Identifier: Apache-2.0
# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ApiAsset(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str = None, created_at: datetime = None, name: str = None, description: str = None, featured: bool = None, publish_approved: bool = None, related_assets: List[str] = None, filter_categories: Dict[str, str] = None):  # noqa: E501
        """ApiAsset - a model defined in Swagger

        :param id: The id of this ApiAsset.  # noqa: E501
        :type id: str
        :param created_at: The created_at of this ApiAsset.  # noqa: E501
        :type created_at: datetime
        :param name: The name of this ApiAsset.  # noqa: E501
        :type name: str
        :param description: The description of this ApiAsset.  # noqa: E501
        :type description: str
        :param featured: The featured of this ApiAsset.  # noqa: E501
        :type featured: bool
        :param publish_approved: The publish_approved of this ApiAsset.  # noqa: E501
        :type publish_approved: bool
        :param related_assets: The related_assets of this ApiAsset.  # noqa: E501
        :type related_assets: List[str]
        :param filter_categories: The filter_categories of this ApiAsset.  # noqa: E501
        :type filter_categories: Dict[str, str]
        """
        self.swagger_types = {
            'id': str,
            'created_at': datetime,
            'name': str,
            'description': str,
            'featured': bool,
            'publish_approved': bool,
            'related_assets': List[str],
            'filter_categories': Dict[str, str]
        }

        self.attribute_map = {
            'id': 'id',
            'created_at': 'created_at',
            'name': 'name',
            'description': 'description',
            'featured': 'featured',
            'publish_approved': 'publish_approved',
            'related_assets': 'related_assets',
            'filter_categories': 'filter_categories'
        }

        self._id = id
        self._created_at = created_at
        self._name = name
        self._description = description
        self._featured = featured
        self._publish_approved = publish_approved
        self._related_assets = related_assets
        self._filter_categories = filter_categories

    @classmethod
    def from_dict(cls, dikt) -> 'ApiAsset':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The apiAsset of this ApiAsset.  # noqa: E501
        :rtype: ApiAsset
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this ApiAsset.


        :return: The id of this ApiAsset.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ApiAsset.


        :param id: The id of this ApiAsset.
        :type id: str
        """

        self._id = id

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this ApiAsset.


        :return: The created_at of this ApiAsset.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this ApiAsset.


        :param created_at: The created_at of this ApiAsset.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def name(self) -> str:
        """Gets the name of this ApiAsset.


        :return: The name of this ApiAsset.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ApiAsset.


        :param name: The name of this ApiAsset.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this ApiAsset.


        :return: The description of this ApiAsset.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this ApiAsset.


        :param description: The description of this ApiAsset.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def featured(self) -> bool:
        """Gets the featured of this ApiAsset.


        :return: The featured of this ApiAsset.
        :rtype: bool
        """
        return self._featured

    @featured.setter
    def featured(self, featured: bool):
        """Sets the featured of this ApiAsset.


        :param featured: The featured of this ApiAsset.
        :type featured: bool
        """

        self._featured = featured

    @property
    def publish_approved(self) -> bool:
        """Gets the publish_approved of this ApiAsset.


        :return: The publish_approved of this ApiAsset.
        :rtype: bool
        """
        return self._publish_approved

    @publish_approved.setter
    def publish_approved(self, publish_approved: bool):
        """Sets the publish_approved of this ApiAsset.


        :param publish_approved: The publish_approved of this ApiAsset.
        :type publish_approved: bool
        """

        self._publish_approved = publish_approved

    @property
    def related_assets(self) -> List[str]:
        """Gets the related_assets of this ApiAsset.


        :return: The related_assets of this ApiAsset.
        :rtype: List[str]
        """
        return self._related_assets

    @related_assets.setter
    def related_assets(self, related_assets: List[str]):
        """Sets the related_assets of this ApiAsset.


        :param related_assets: The related_assets of this ApiAsset.
        :type related_assets: List[str]
        """

        self._related_assets = related_assets

    @property
    def filter_categories(self) -> Dict[str, str]:
        """Gets the filter_categories of this ApiAsset.


        :return: The filter_categories of this ApiAsset.
        :rtype: Dict[str, str]
        """
        return self._filter_categories

    @filter_categories.setter
    def filter_categories(self, filter_categories: Dict[str, str]):
        """Sets the filter_categories of this ApiAsset.


        :param filter_categories: The filter_categories of this ApiAsset.
        :type filter_categories: Dict[str, str]
        """

        self._filter_categories = filter_categories
