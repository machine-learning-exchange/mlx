# Copyright 2021 The MLX Contributors
#
# SPDX-License-Identifier: Apache-2.0
# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ApiCredential(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str = None, created_at: datetime = None, pipeline_id: str = None, project_id: str = None, api_key: str = None, data_assets: List[str] = None):  # noqa: E501
        """ApiCredential - a model defined in Swagger

        :param id: The id of this ApiCredential.  # noqa: E501
        :type id: str
        :param created_at: The created_at of this ApiCredential.  # noqa: E501
        :type created_at: datetime
        :param pipeline_id: The pipeline_id of this ApiCredential.  # noqa: E501
        :type pipeline_id: str
        :param project_id: The project_id of this ApiCredential.  # noqa: E501
        :type project_id: str
        :param api_key: The api_key of this ApiCredential.  # noqa: E501
        :type api_key: str
        :param data_assets: The data_assets of this ApiCredential.  # noqa: E501
        :type data_assets: List[str]
        """
        self.swagger_types = {
            'id': str,
            'created_at': datetime,
            'pipeline_id': str,
            'project_id': str,
            'api_key': str,
            'data_assets': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'created_at': 'created_at',
            'pipeline_id': 'pipeline_id',
            'project_id': 'project_id',
            'api_key': 'api_key',
            'data_assets': 'data_assets'
        }

        self._id = id
        self._created_at = created_at
        self._pipeline_id = pipeline_id
        self._project_id = project_id
        self._api_key = api_key
        self._data_assets = data_assets

    @classmethod
    def from_dict(cls, dikt) -> 'ApiCredential':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The apiCredential of this ApiCredential.  # noqa: E501
        :rtype: ApiCredential
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this ApiCredential.


        :return: The id of this ApiCredential.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ApiCredential.


        :param id: The id of this ApiCredential.
        :type id: str
        """

        self._id = id

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this ApiCredential.


        :return: The created_at of this ApiCredential.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this ApiCredential.


        :param created_at: The created_at of this ApiCredential.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def pipeline_id(self) -> str:
        """Gets the pipeline_id of this ApiCredential.


        :return: The pipeline_id of this ApiCredential.
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id: str):
        """Sets the pipeline_id of this ApiCredential.


        :param pipeline_id: The pipeline_id of this ApiCredential.
        :type pipeline_id: str
        """
        if pipeline_id is None:
            raise ValueError("Invalid value for `pipeline_id`, must not be `None`")  # noqa: E501

        self._pipeline_id = pipeline_id

    @property
    def project_id(self) -> str:
        """Gets the project_id of this ApiCredential.


        :return: The project_id of this ApiCredential.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: str):
        """Sets the project_id of this ApiCredential.


        :param project_id: The project_id of this ApiCredential.
        :type project_id: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def api_key(self) -> str:
        """Gets the api_key of this ApiCredential.

        TODO: what is the api_key  # noqa: E501

        :return: The api_key of this ApiCredential.
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key: str):
        """Sets the api_key of this ApiCredential.

        TODO: what is the api_key  # noqa: E501

        :param api_key: The api_key of this ApiCredential.
        :type api_key: str
        """

        self._api_key = api_key

    @property
    def data_assets(self) -> List[str]:
        """Gets the data_assets of this ApiCredential.

        List of data asset IDs  # noqa: E501

        :return: The data_assets of this ApiCredential.
        :rtype: List[str]
        """
        return self._data_assets

    @data_assets.setter
    def data_assets(self, data_assets: List[str]):
        """Sets the data_assets of this ApiCredential.

        List of data asset IDs  # noqa: E501

        :param data_assets: The data_assets of this ApiCredential.
        :type data_assets: List[str]
        """

        self._data_assets = data_assets
