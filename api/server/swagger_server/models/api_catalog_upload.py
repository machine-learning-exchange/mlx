# Copyright 2021 The MLX Contributors
#
# SPDX-License-Identifier: Apache-2.0
# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.api_access_token import ApiAccessToken
from swagger_server.models.api_catalog_upload_item import ApiCatalogUploadItem
from swagger_server.models.base_model_ import Model
from swagger_server import util


class ApiCatalogUpload(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, api_access_tokens: List[ApiAccessToken] = None, components: List[ApiCatalogUploadItem] = None, datasets: List[ApiCatalogUploadItem] = None, models: List[ApiCatalogUploadItem] = None, notebooks: List[ApiCatalogUploadItem] = None, pipelines: List[ApiCatalogUploadItem] = None):  # noqa: E501
        """ApiCatalogUpload - a model defined in Swagger

        :param api_access_tokens: The api_access_tokens of this ApiCatalogUpload.  # noqa: E501
        :type api_access_tokens: List[ApiAccessToken]
        :param components: The components of this ApiCatalogUpload.  # noqa: E501
        :type components: List[ApiCatalogUploadItem]
        :param datasets: The datasets of this ApiCatalogUpload.  # noqa: E501
        :type datasets: List[ApiCatalogUploadItem]
        :param models: The models of this ApiCatalogUpload.  # noqa: E501
        :type models: List[ApiCatalogUploadItem]
        :param notebooks: The notebooks of this ApiCatalogUpload.  # noqa: E501
        :type notebooks: List[ApiCatalogUploadItem]
        :param pipelines: The pipelines of this ApiCatalogUpload.  # noqa: E501
        :type pipelines: List[ApiCatalogUploadItem]
        """
        self.swagger_types = {
            'api_access_tokens': List[ApiAccessToken],
            'components': List[ApiCatalogUploadItem],
            'datasets': List[ApiCatalogUploadItem],
            'models': List[ApiCatalogUploadItem],
            'notebooks': List[ApiCatalogUploadItem],
            'pipelines': List[ApiCatalogUploadItem]
        }

        self.attribute_map = {
            'api_access_tokens': 'api_access_tokens',
            'components': 'components',
            'datasets': 'datasets',
            'models': 'models',
            'notebooks': 'notebooks',
            'pipelines': 'pipelines'
        }

        self._api_access_tokens = api_access_tokens
        self._components = components
        self._datasets = datasets
        self._models = models
        self._notebooks = notebooks
        self._pipelines = pipelines

    @classmethod
    def from_dict(cls, dikt) -> 'ApiCatalogUpload':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The apiCatalogUpload of this ApiCatalogUpload.  # noqa: E501
        :rtype: ApiCatalogUpload
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_access_tokens(self) -> List[ApiAccessToken]:
        """Gets the api_access_tokens of this ApiCatalogUpload.

        A mapping of read-only API access tokens to a partial URL.  # noqa: E501

        :return: The api_access_tokens of this ApiCatalogUpload.
        :rtype: List[ApiAccessToken]
        """
        return self._api_access_tokens

    @api_access_tokens.setter
    def api_access_tokens(self, api_access_tokens: List[ApiAccessToken]):
        """Sets the api_access_tokens of this ApiCatalogUpload.

        A mapping of read-only API access tokens to a partial URL.  # noqa: E501

        :param api_access_tokens: The api_access_tokens of this ApiCatalogUpload.
        :type api_access_tokens: List[ApiAccessToken]
        """

        self._api_access_tokens = api_access_tokens

    @property
    def components(self) -> List[ApiCatalogUploadItem]:
        """Gets the components of this ApiCatalogUpload.


        :return: The components of this ApiCatalogUpload.
        :rtype: List[ApiCatalogUploadItem]
        """
        return self._components

    @components.setter
    def components(self, components: List[ApiCatalogUploadItem]):
        """Sets the components of this ApiCatalogUpload.


        :param components: The components of this ApiCatalogUpload.
        :type components: List[ApiCatalogUploadItem]
        """

        self._components = components

    @property
    def datasets(self) -> List[ApiCatalogUploadItem]:
        """Gets the datasets of this ApiCatalogUpload.


        :return: The datasets of this ApiCatalogUpload.
        :rtype: List[ApiCatalogUploadItem]
        """
        return self._datasets

    @datasets.setter
    def datasets(self, datasets: List[ApiCatalogUploadItem]):
        """Sets the datasets of this ApiCatalogUpload.


        :param datasets: The datasets of this ApiCatalogUpload.
        :type datasets: List[ApiCatalogUploadItem]
        """

        self._datasets = datasets

    @property
    def models(self) -> List[ApiCatalogUploadItem]:
        """Gets the models of this ApiCatalogUpload.


        :return: The models of this ApiCatalogUpload.
        :rtype: List[ApiCatalogUploadItem]
        """
        return self._models

    @models.setter
    def models(self, models: List[ApiCatalogUploadItem]):
        """Sets the models of this ApiCatalogUpload.


        :param models: The models of this ApiCatalogUpload.
        :type models: List[ApiCatalogUploadItem]
        """

        self._models = models

    @property
    def notebooks(self) -> List[ApiCatalogUploadItem]:
        """Gets the notebooks of this ApiCatalogUpload.


        :return: The notebooks of this ApiCatalogUpload.
        :rtype: List[ApiCatalogUploadItem]
        """
        return self._notebooks

    @notebooks.setter
    def notebooks(self, notebooks: List[ApiCatalogUploadItem]):
        """Sets the notebooks of this ApiCatalogUpload.


        :param notebooks: The notebooks of this ApiCatalogUpload.
        :type notebooks: List[ApiCatalogUploadItem]
        """

        self._notebooks = notebooks

    @property
    def pipelines(self) -> List[ApiCatalogUploadItem]:
        """Gets the pipelines of this ApiCatalogUpload.


        :return: The pipelines of this ApiCatalogUpload.
        :rtype: List[ApiCatalogUploadItem]
        """
        return self._pipelines

    @pipelines.setter
    def pipelines(self, pipelines: List[ApiCatalogUploadItem]):
        """Sets the pipelines of this ApiCatalogUpload.


        :param pipelines: The pipelines of this ApiCatalogUpload.
        :type pipelines: List[ApiCatalogUploadItem]
        """

        self._pipelines = pipelines
