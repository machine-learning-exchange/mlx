# Copyright 2021 The MLX Contributors
#
# SPDX-License-Identifier: Apache-2.0
# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models import ApiComponent, ApiDataset, ApiModel, ApiNotebook, ApiPipeline, ApiCatalogUploadError
from swagger_server.models.base_model_ import Model
from swagger_server import util


class ApiCatalogUploadResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, components: List[ApiComponent] = None, datasets: List[ApiDataset] = None, models: List[ApiModel] = None, notebooks: List[ApiNotebook] = None, pipelines: List[ApiPipeline] = None, total_size: int = None, next_page_token: str = None, errors: List[ApiCatalogUploadError] = None, total_errors: int = None, total_created: int = None):  # noqa: E501
        """ApiCatalogUploadResponse - a model defined in Swagger

        :param components: The components of this ApiCatalogUploadResponse.  # noqa: E501
        :type components: List[ApiComponent]
        :param datasets: The datasets of this ApiCatalogUploadResponse.  # noqa: E501
        :type datasets: List[ApiDataset]
        :param models: The models of this ApiCatalogUploadResponse.  # noqa: E501
        :type models: List[ApiModel]
        :param notebooks: The notebooks of this ApiCatalogUploadResponse.  # noqa: E501
        :type notebooks: List[ApiNotebook]
        :param pipelines: The pipelines of this ApiCatalogUploadResponse.  # noqa: E501
        :type pipelines: List[ApiPipeline]
        :param total_size: The total_size of this ApiCatalogUploadResponse.  # noqa: E501
        :type total_size: int
        :param next_page_token: The next_page_token of this ApiCatalogUploadResponse.  # noqa: E501
        :type next_page_token: str
        :param errors: The errors of this ApiCatalogUploadResponse.  # noqa: E501
        :type errors: List[ApiCatalogUploadError]
        :param total_errors: The total_errors of this ApiCatalogUploadResponse.  # noqa: E501
        :type total_errors: int
        :param total_created: The total_created of this ApiCatalogUploadResponse.  # noqa: E501
        :type total_created: int
        """
        self.swagger_types = {
            'components': List[ApiComponent],
            'datasets': List[ApiDataset],
            'models': List[ApiModel],
            'notebooks': List[ApiNotebook],
            'pipelines': List[ApiPipeline],
            'total_size': int,
            'next_page_token': str,
            'errors': List[ApiCatalogUploadError],
            'total_errors': int,
            'total_created': int
        }

        self.attribute_map = {
            'components': 'components',
            'datasets': 'datasets',
            'models': 'models',
            'notebooks': 'notebooks',
            'pipelines': 'pipelines',
            'total_size': 'total_size',
            'next_page_token': 'next_page_token',
            'errors': 'errors',
            'total_errors': 'total_errors',
            'total_created': 'total_created'
        }

        self._components = components
        self._datasets = datasets
        self._models = models
        self._notebooks = notebooks
        self._pipelines = pipelines
        self._total_size = total_size
        self._next_page_token = next_page_token
        self._errors = errors
        self._total_errors = total_errors
        self._total_created = total_created

    @classmethod
    def from_dict(cls, dikt) -> 'ApiCatalogUploadResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The apiCatalogUploadResponse of this ApiCatalogUploadResponse.  # noqa: E501
        :rtype: ApiCatalogUploadResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def components(self) -> List[ApiComponent]:
        """Gets the components of this ApiCatalogUploadResponse.


        :return: The components of this ApiCatalogUploadResponse.
        :rtype: List[ApiComponent]
        """
        return self._components

    @components.setter
    def components(self, components: List[ApiComponent]):
        """Sets the components of this ApiCatalogUploadResponse.


        :param components: The components of this ApiCatalogUploadResponse.
        :type components: List[ApiComponent]
        """

        self._components = components

    @property
    def datasets(self) -> List[ApiDataset]:
        """Gets the datasets of this ApiCatalogUploadResponse.


        :return: The datasets of this ApiCatalogUploadResponse.
        :rtype: List[ApiDataset]
        """
        return self._datasets

    @datasets.setter
    def datasets(self, datasets: List[ApiDataset]):
        """Sets the datasets of this ApiCatalogUploadResponse.


        :param datasets: The datasets of this ApiCatalogUploadResponse.
        :type datasets: List[ApiDataset]
        """

        self._datasets = datasets

    @property
    def models(self) -> List[ApiModel]:
        """Gets the models of this ApiCatalogUploadResponse.


        :return: The models of this ApiCatalogUploadResponse.
        :rtype: List[ApiModel]
        """
        return self._models

    @models.setter
    def models(self, models: List[ApiModel]):
        """Sets the models of this ApiCatalogUploadResponse.


        :param models: The models of this ApiCatalogUploadResponse.
        :type models: List[ApiModel]
        """

        self._models = models

    @property
    def notebooks(self) -> List[ApiNotebook]:
        """Gets the notebooks of this ApiCatalogUploadResponse.


        :return: The notebooks of this ApiCatalogUploadResponse.
        :rtype: List[ApiNotebook]
        """
        return self._notebooks

    @notebooks.setter
    def notebooks(self, notebooks: List[ApiNotebook]):
        """Sets the notebooks of this ApiCatalogUploadResponse.


        :param notebooks: The notebooks of this ApiCatalogUploadResponse.
        :type notebooks: List[ApiNotebook]
        """

        self._notebooks = notebooks

    @property
    def pipelines(self) -> List[ApiPipeline]:
        """Gets the pipelines of this ApiCatalogUploadResponse.


        :return: The pipelines of this ApiCatalogUploadResponse.
        :rtype: List[ApiPipeline]
        """
        return self._pipelines

    @pipelines.setter
    def pipelines(self, pipelines: List[ApiPipeline]):
        """Sets the pipelines of this ApiCatalogUploadResponse.


        :param pipelines: The pipelines of this ApiCatalogUploadResponse.
        :type pipelines: List[ApiPipeline]
        """

        self._pipelines = pipelines

    @property
    def total_size(self) -> int:
        """Gets the total_size of this ApiCatalogUploadResponse.


        :return: The total_size of this ApiCatalogUploadResponse.
        :rtype: int
        """
        return self._total_size

    @total_size.setter
    def total_size(self, total_size: int):
        """Sets the total_size of this ApiCatalogUploadResponse.


        :param total_size: The total_size of this ApiCatalogUploadResponse.
        :type total_size: int
        """

        self._total_size = total_size

    @property
    def next_page_token(self) -> str:
        """Gets the next_page_token of this ApiCatalogUploadResponse.


        :return: The next_page_token of this ApiCatalogUploadResponse.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token: str):
        """Sets the next_page_token of this ApiCatalogUploadResponse.


        :param next_page_token: The next_page_token of this ApiCatalogUploadResponse.
        :type next_page_token: str
        """

        self._next_page_token = next_page_token

    @property
    def errors(self) -> List[ApiCatalogUploadError]:
        """Gets the errors of this ApiCatalogUploadResponse.


        :return: The errors of this ApiCatalogUploadResponse.
        :rtype: List[ApiCatalogUploadError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors: List[ApiCatalogUploadError]):
        """Sets the errors of this ApiCatalogUploadResponse.


        :param errors: The errors of this ApiCatalogUploadResponse.
        :type errors: List[ApiCatalogUploadError]
        """

        self._errors = errors

    @property
    def total_errors(self) -> int:
        """Gets the total_errors of this ApiCatalogUploadResponse.


        :return: The total_errors of this ApiCatalogUploadResponse.
        :rtype: int
        """
        return self._total_errors

    @total_errors.setter
    def total_errors(self, total_errors: int):
        """Sets the total_errors of this ApiCatalogUploadResponse.


        :param total_errors: The total_errors of this ApiCatalogUploadResponse.
        :type total_errors: int
        """

        self._total_errors = total_errors

    @property
    def total_created(self) -> int:
        """Gets the total_created of this ApiCatalogUploadResponse.


        :return: The total_created of this ApiCatalogUploadResponse.
        :rtype: int
        """
        return self._total_created

    @total_created.setter
    def total_created(self, total_created: int):
        """Sets the total_created of this ApiCatalogUploadResponse.


        :param total_created: The total_created of this ApiCatalogUploadResponse.
        :type total_created: int
        """

        self._total_created = total_created
