# Copyright 2021 The MLX Contributors
#
# SPDX-License-Identifier: Apache-2.0
# coding: utf-8

"""
    MLX API

    MLX API Extension for Kubeflow Pipelines  # noqa: E501

    OpenAPI spec version: 0.1.30-upload-catalog-from-url
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import re  # noqa: F401


from swagger_client.models.api_parameter import ApiParameter  # noqa: F401,E501
from swagger_client.models.api_pipeline import ApiPipeline  # noqa: F401,E501
from swagger_client.models.api_pipeline_extension import ApiPipelineExtension  # noqa: F401,E501


class ApiPipelineExtended(ApiPipeline, ApiPipelineExtension):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_at': 'datetime',
        'name': 'str',
        'description': 'str',
        'parameters': 'list[ApiParameter]',
        'status': 'str',
        'default_version_id': 'str',
        'namespace': 'str',
        'annotations': 'dict(str, str)',
        'featured': 'bool',
        'publish_approved': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'name': 'name',
        'description': 'description',
        'parameters': 'parameters',
        'status': 'status',
        'default_version_id': 'default_version_id',
        'namespace': 'namespace',
        'annotations': 'annotations',
        'featured': 'featured',
        'publish_approved': 'publish_approved'
    }

    def __init__(self, id=None, created_at=None, name=None, description=None, parameters=None, status=None, default_version_id=None, namespace=None, annotations=None, featured=None, publish_approved=None):  # noqa: E501
        """ApiPipelineExtended - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._created_at = None
        self._name = None
        self._description = None
        self._parameters = None
        self._status = None
        self._default_version_id = None
        self._namespace = None
        self._annotations = None
        self._featured = None
        self._publish_approved = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if parameters is not None:
            self.parameters = parameters
        if status is not None:
            self.status = status
        if default_version_id is not None:
            self.default_version_id = default_version_id
        if namespace is not None:
            self.namespace = namespace
        if annotations is not None:
            self.annotations = annotations
        if featured is not None:
            self.featured = featured
        if publish_approved is not None:
            self.publish_approved = publish_approved

    # @property
    # def id(self):
    #     """Gets the id of this ApiPipelineExtended.  # noqa: E501
    #
    #
    #     :return: The id of this ApiPipelineExtended.  # noqa: E501
    #     :rtype: str
    #     """
    #     return self._id
    #
    # @id.setter
    # def id(self, id):
    #     """Sets the id of this ApiPipelineExtended.
    #
    #
    #     :param id: The id of this ApiPipelineExtended.  # noqa: E501
    #     :type: str
    #     """
    #
    #     self._id = id
    #
    # @property
    # def created_at(self):
    #     """Gets the created_at of this ApiPipelineExtended.  # noqa: E501
    #
    #
    #     :return: The created_at of this ApiPipelineExtended.  # noqa: E501
    #     :rtype: datetime
    #     """
    #     return self._created_at
    #
    # @created_at.setter
    # def created_at(self, created_at):
    #     """Sets the created_at of this ApiPipelineExtended.
    #
    #
    #     :param created_at: The created_at of this ApiPipelineExtended.  # noqa: E501
    #     :type: datetime
    #     """
    #
    #     self._created_at = created_at
    #
    # @property
    # def name(self):
    #     """Gets the name of this ApiPipelineExtended.  # noqa: E501
    #
    #
    #     :return: The name of this ApiPipelineExtended.  # noqa: E501
    #     :rtype: str
    #     """
    #     return self._name
    #
    # @name.setter
    # def name(self, name):
    #     """Sets the name of this ApiPipelineExtended.
    #
    #
    #     :param name: The name of this ApiPipelineExtended.  # noqa: E501
    #     :type: str
    #     """
    #
    #     self._name = name
    #
    # @property
    # def description(self):
    #     """Gets the description of this ApiPipelineExtended.  # noqa: E501
    #
    #
    #     :return: The description of this ApiPipelineExtended.  # noqa: E501
    #     :rtype: str
    #     """
    #     return self._description
    #
    # @description.setter
    # def description(self, description):
    #     """Sets the description of this ApiPipelineExtended.
    #
    #
    #     :param description: The description of this ApiPipelineExtended.  # noqa: E501
    #     :type: str
    #     """
    #
    #     self._description = description
    #
    # @property
    # def parameters(self):
    #     """Gets the parameters of this ApiPipelineExtended.  # noqa: E501
    #
    #
    #     :return: The parameters of this ApiPipelineExtended.  # noqa: E501
    #     :rtype: list[ApiParameter]
    #     """
    #     return self._parameters
    #
    # @parameters.setter
    # def parameters(self, parameters):
    #     """Sets the parameters of this ApiPipelineExtended.
    #
    #
    #     :param parameters: The parameters of this ApiPipelineExtended.  # noqa: E501
    #     :type: list[ApiParameter]
    #     """
    #
    #     self._parameters = parameters
    #
    # @property
    # def status(self):
    #     """Gets the status of this ApiPipelineExtended.  # noqa: E501
    #
    #     In case any error happens retrieving a pipeline field, only pipeline ID and the error message is returned. Client has the flexibility of choosing how to handle error. This is especially useful during listing call.  # noqa: E501
    #
    #     :return: The status of this ApiPipelineExtended.  # noqa: E501
    #     :rtype: str
    #     """
    #     return self._status
    #
    # @status.setter
    # def status(self, status):
    #     """Sets the status of this ApiPipelineExtended.
    #
    #     In case any error happens retrieving a pipeline field, only pipeline ID and the error message is returned. Client has the flexibility of choosing how to handle error. This is especially useful during listing call.  # noqa: E501
    #
    #     :param status: The status of this ApiPipelineExtended.  # noqa: E501
    #     :type: str
    #     """
    #
    #     self._status = status
    #
    # @property
    # def default_version_id(self):
    #     """Gets the default_version_id of this ApiPipelineExtended.  # noqa: E501
    #
    #     The default version of the pipeline. As of now, the latest version is used as default. (In the future, if desired by customers, we can allow them to set default version.)  # noqa: E501
    #
    #     :return: The default_version_id of this ApiPipelineExtended.  # noqa: E501
    #     :rtype: str
    #     """
    #     return self._default_version_id
    #
    # @default_version_id.setter
    # def default_version_id(self, default_version_id):
    #     """Sets the default_version_id of this ApiPipelineExtended.
    #
    #     The default version of the pipeline. As of now, the latest version is used as default. (In the future, if desired by customers, we can allow them to set default version.)  # noqa: E501
    #
    #     :param default_version_id: The default_version_id of this ApiPipelineExtended.  # noqa: E501
    #     :type: str
    #     """
    #
    #     self._default_version_id = default_version_id
    #
    # @property
    # def namespace(self):
    #     """Gets the namespace of this ApiPipelineExtended.  # noqa: E501
    #
    #
    #     :return: The namespace of this ApiPipelineExtended.  # noqa: E501
    #     :rtype: str
    #     """
    #     return self._namespace
    #
    # @namespace.setter
    # def namespace(self, namespace):
    #     """Sets the namespace of this ApiPipelineExtended.
    #
    #
    #     :param namespace: The namespace of this ApiPipelineExtended.  # noqa: E501
    #     :type: str
    #     """
    #
    #     self._namespace = namespace
    #
    # @property
    # def annotations(self):
    #     """Gets the annotations of this ApiPipelineExtended.  # noqa: E501
    #
    #
    #     :return: The annotations of this ApiPipelineExtended.  # noqa: E501
    #     :rtype: dict(str, str)
    #     """
    #     return self._annotations
    #
    # @annotations.setter
    # def annotations(self, annotations):
    #     """Sets the annotations of this ApiPipelineExtended.
    #
    #
    #     :param annotations: The annotations of this ApiPipelineExtended.  # noqa: E501
    #     :type: dict(str, str)
    #     """
    #
    #     self._annotations = annotations
    #
    # @property
    # def featured(self):
    #     """Gets the featured of this ApiPipelineExtended.  # noqa: E501
    #
    #
    #     :return: The featured of this ApiPipelineExtended.  # noqa: E501
    #     :rtype: bool
    #     """
    #     return self._featured
    #
    # @featured.setter
    # def featured(self, featured):
    #     """Sets the featured of this ApiPipelineExtended.
    #
    #
    #     :param featured: The featured of this ApiPipelineExtended.  # noqa: E501
    #     :type: bool
    #     """
    #
    #     self._featured = featured
    #
    # @property
    # def publish_approved(self):
    #     """Gets the publish_approved of this ApiPipelineExtended.  # noqa: E501
    #
    #
    #     :return: The publish_approved of this ApiPipelineExtended.  # noqa: E501
    #     :rtype: bool
    #     """
    #     return self._publish_approved
    #
    # @publish_approved.setter
    # def publish_approved(self, publish_approved):
    #     """Sets the publish_approved of this ApiPipelineExtended.
    #
    #
    #     :param publish_approved: The publish_approved of this ApiPipelineExtended.  # noqa: E501
    #     :type: bool
    #     """
    #
    #     self._publish_approved = publish_approved
    #
    # def to_dict(self):
    #     """Returns the model properties as a dict"""
    #     result = {}
    #
    #     for attr, _ in six.iteritems(self.swagger_types):
    #         value = getattr(self, attr)
    #         if isinstance(value, list):
    #             result[attr] = list(map(
    #                 lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
    #                 value
    #             ))
    #         elif hasattr(value, "to_dict"):
    #             result[attr] = value.to_dict()
    #         elif isinstance(value, dict):
    #             result[attr] = dict(map(
    #                 lambda item: (item[0], item[1].to_dict())
    #                 if hasattr(item[1], "to_dict") else item,
    #                 value.items()
    #             ))
    #         else:
    #             result[attr] = value
    #     if issubclass(ApiPipelineExtended, dict):
    #         for key, value in self.items():
    #             result[key] = value
    #
    #     return result
    #
    # def to_str(self):
    #     """Returns the string representation of the model"""
    #     return pprint.pformat(self.to_dict())
    #
    # def __repr__(self):
    #     """For `print` and `pprint`"""
    #     return self.to_str()
    #
    # def __eq__(self, other):
    #     """Returns true if both objects are equal"""
    #     if not isinstance(other, ApiPipelineExtended):
    #         return False
    #
    #     return self.__dict__ == other.__dict__
    #
    # def __ne__(self, other):
    #     """Returns true if both objects are not equal"""
    #     return not self == other
