#!/usr/bin/env python3

# Copyright 2021 The MLX Contributors
#
# SPDX-License-Identifier: Apache-2.0

import itertools
import re

from glob import glob
from os import environ as env
from os.path import abspath, dirname, split

GITHUB_REPO = env.get(
    "GITHUB_REPO", "https://github.com/machine-learning-exchange/mlx/")

md_file_path_expressions = [
    "/docs/*.md"
]

script_folder = abspath(dirname(__file__))
project_root_dir = abspath(dirname(dirname(script_folder)))
github_repo_master_path = "{}/blob/master/docs/".format(
    GITHUB_REPO.rstrip("/"))


def find_md_files() -> [str]:

    print("Checking for Markdown files here:\n")
    for path_expr in md_file_path_expressions:
        print("  " + path_expr.lstrip("/"))
    print("")

    md_files_list_of_lists = [glob(project_root_dir + path_expr, recursive=True)
                              for path_expr in md_file_path_expressions]

    return sorted(list(itertools.chain(*md_files_list_of_lists)))


def get_header_from_md_file(md_file_path: str) -> [str]:

    with open(md_file_path, "r") as f:
        md_file_content = f.readline()

    # remove "#" and newline character
    header = re.sub(r"#+ *|\n", "", md_file_content)

    # return description header
    return header


def update_doc_table() -> [str]:

    # 1. find all relevant Markdown files
    md_file_paths = find_md_files()

    # 2. extract all descriptions using headers (first line) from files
    descriptions = [
        get_header_from_md_file(file)
        for file in md_file_paths
    ]

    # 3. format filenames as Markdown hyperlinks: [name](url)
    md_filenames = ["[" + split(file)[1] + "](" + github_repo_master_path + split(file)[1] + ")"
                    for file in md_file_paths]

    table = []
    table.append(
        "<!-- Do not edit. This file was generated by ./tools/python/update_doc_table.py (make update_doc_table) -->\n"
        "\n"
        "| Document | Description |\n"
        "| --- | --- |"
    )

    for i in range(len(md_filenames)):
        if("README.md" in md_filenames[i]):
            continue
        table.append(
            f"| {md_filenames[i]} | {descriptions[i]} |"
        )

    f = open("./docs/README.md", "w")
    f.write("\n".join(table))
    f.close()


if __name__ == '__main__':
    update_doc_table()
